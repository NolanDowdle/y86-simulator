         .pos 0
         irmovq stack, %rsp
         irmovq list, %rdi
         call minList
         halt
#
# minList: return the minimum value of the elements of a NULL terminated list
# parameter: %rdi contains the value list, which
#            is the adress of the first element in the list
# return: %rax contains the minimum value in the list
minList: 
         mrmovq 0(%rdi), %rax #moves the beginning of the list into register rax
         irmovq 8, %rcx #make register rcx 8 because of the .align 8 above list
         addq %rcx, %rdi # point to the next element in the list
loop:      
         mrmovq 0(%rdi), %rbx # move the element of the list that rdi points to into rbx (53)
         andq %rbx, %rbx # if the element moved is zero, then in the next line we jump to end of program
         je end
         
         subq %rax, %rbx #subtracts the current minimum from the current element in the list (stored in rbx)
         jge skip #if the number returned from the subtraction is greater or equal to zero, then we haven't
                  #found a new minimum, so we skip it

         mrmovq 0(%rdi), %rax #if it's not greater than or equal to,
                              #then we don't skip the element, instead we move the element in the list
                              #into rax (the minimum value register)
         
skip:    
         addq %rcx, %rdi # make rdi point to the next element in the list again
         jmp loop #return to the loop to check for more minimum values

end:     
         ret
         .align 8
list:    .quad 22
         .quad 53
         .quad -7 
         .quad 1
         .quad -2
         .quad 42
         .quad -5
         .quad 0  #indicates the end of the list
#
         .pos 0x200
stack:
